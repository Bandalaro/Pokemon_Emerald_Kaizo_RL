# -*- coding: utf-8 -*-
"""Pokemon_Team_Selection_V2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dhdFfqEoSU3EDUNkQrG7oF52YHwqBJUU
"""

import requests
import json
import numpy as np
import random
import time

# Load player team from JSON file
def load_player_team(file_path):
    with open(file_path, 'r') as file:
        return json.load(file)

# Fetch Pokémon data from PokéAPI with improved error handling
def fetch_pokemon_data(pokemon_name):
    url = f"https://pokeapi.co/api/v2/pokemon/{pokemon_name.lower()}"
    for attempt in range(3):
        response = requests.get(url)
        if response.status_code == 200:
            return response.json()
        elif response.status_code == 404:
            print(f"Error: Pokémon '{pokemon_name}' not found.")
            return None
        else:
            print(f"Warning: API request failed ({attempt + 1}/3). Retrying...")
            time.sleep(2)
    return None

# Fetch move data from API
def fetch_move_data(move_name):
    url = f"https://pokeapi.co/api/v2/move/{move_name.lower()}"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return {
            "power": data.get("power", 0) or 0,
            "accuracy": data.get("accuracy", 100) or 100,
            "pp": data.get("pp", 10) or 10,
            "priority": data.get("priority", 0) or 0,
            "effect": data.get("effect_entries", [{}])[0].get("short_effect", "")
        }
    return None

# Get Pokémon by type, ensuring diversity
def fetch_pokemon_by_type(pokemon_type):
    url = f"https://pokeapi.co/api/v2/type/{pokemon_type.lower()}"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        pokemon_list = [p["pokemon"]["name"] for p in data["pokemon"] if "legendary" not in p["pokemon"]["name"]]
        return random.sample(pokemon_list, min(5, len(pokemon_list))) if pokemon_list else ["arcanine"]
    return ["arcanine"]

# Calculate move score based on power, accuracy, priority, and effect
def calculate_move_score(move_data):
    power = move_data["power"] * 1.2
    accuracy = move_data["accuracy"] * 0.8
    pp = move_data["pp"] * 0.5
    priority = move_data["priority"] * 20
    effect_bonus = 50 if "increase" in move_data["effect"] or "boost" in move_data["effect"] else 0
    return power + accuracy + pp + priority + effect_bonus

# Get optimized moves for a Pokémon
def get_moves(pokemon_data, level_cap):
    if not pokemon_data:
        return ["Tackle"]

    move_scores = {}
    for move in pokemon_data.get("moves", []):
        for version in move.get("version_group_details", []):
            if version.get("move_learn_method", {}).get("name") == "level-up" and version.get("level_learned_at", 999) <= level_cap:
                move_name = move["move"]["name"]
                move_data = fetch_move_data(move_name)
                if move_data and move_data["power"] > 40:
                    move_scores[move_name] = calculate_move_score(move_data)

    return sorted(move_scores, key=move_scores.get, reverse=True)[:4] or ["Tackle"]

# RL Q-learning Agent
def select_team_strategy():
    return random.choice(["balanced", "offensive", "defensive"])

# Select AI team based on player team
def select_ai_team(player_team):
    ai_team = []
    team_strategy = select_team_strategy()

    for pokemon in player_team["team"]:
        data = fetch_pokemon_data(pokemon["name"])
        if data:
            types = [t["type"]["name"] for t in data["types"]]
            counter_type = random.choice(types)
            counter_pokemon_names = fetch_pokemon_by_type(counter_type)
            counter_pokemon_name = random.choice(counter_pokemon_names)
            counter_data = fetch_pokemon_data(counter_pokemon_name)
            ai_team.append({
                "name": counter_pokemon_name,
                "level": max(pokemon["level"], random.randint(pokemon["level"], pokemon["level"] + 5)),
                "hitpoints": random.randint(190, 250),
                "status": "Healthy",
                "ability": counter_data["abilities"][0]["ability"]["name"] if counter_data else "Unknown",
                "moves": get_moves(counter_data, max(pokemon["level"], 50))
            })
    return ai_team

# Main function
def main():
    with open("pokemon_team.json", "r") as file:
        player_team = json.load(file)
    if "team" not in player_team:
        print("Error: Incorrect JSON format. Expected a 'team' key.")
        return

    ai_team = select_ai_team(player_team)
    with open("ai_team_output.json", "w") as file:
        json.dump(ai_team, file, indent=4)

    print("AI team selection and move decisions saved to ai_team_output.json")

if __name__ == "__main__":
    main()